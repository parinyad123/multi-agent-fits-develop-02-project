"""Initial database schema

Revision ID: 6b54aa8f2d3a
Revises: 
Create Date: 2025-10-09 14:39:10.265758

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6b54aa8f2d3a'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_index('idx_user_email', 'users', ['email'], unique=False)
    op.create_index('idx_user_username', 'users', ['username'], unique=False)
    op.create_table('fits_files',
    sa.Column('file_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('original_filename', sa.String(length=255), nullable=False),
    sa.Column('metadata_filename', sa.String(length=255), nullable=True),
    sa.Column('file_size', sa.BigInteger(), nullable=False),
    sa.Column('storage_path', sa.String(length=500), nullable=False),
    sa.Column('is_valid', sa.Boolean(), nullable=True),
    sa.Column('validation_status', sa.String(length=50), nullable=True),
    sa.Column('validation_error', sa.Text(), nullable=True),
    sa.Column('uploaded_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_accessed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('fits_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('data_info', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.CheckConstraint('file_size > 0', name='check_file_size_positive'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('file_id'),
    sa.UniqueConstraint('storage_path')
    )
    op.create_index('idx_fits_is_valid', 'fits_files', ['is_valid'], unique=False)
    op.create_index('idx_fits_last_accessed', 'fits_files', ['last_accessed_at'], unique=False)
    op.create_index('idx_fits_uploaded_at', 'fits_files', ['uploaded_at'], unique=False)
    op.create_index('idx_fits_user_id', 'fits_files', ['user_id'], unique=False)
    op.create_index('idx_fits_validation_status', 'fits_files', ['validation_status'], unique=False)
    op.create_table('sessions',
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_activity_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('current_file_id', sa.UUID(), nullable=True),
    sa.Column('session_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['current_file_id'], ['fits_files.file_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('session_id')
    )
    op.create_index('idx_session_is_active', 'sessions', ['is_active'], unique=False)
    op.create_index('idx_session_last_activity', 'sessions', ['last_activity_at'], unique=False)
    op.create_index('idx_session_user_id', 'sessions', ['user_id'], unique=False)
    op.create_table('analysis_history',
    sa.Column('analysis_id', sa.UUID(), nullable=False),
    sa.Column('file_id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('analysis_types', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('results', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('workflow_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('execution_time_seconds', sa.BigInteger(), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['file_id'], ['fits_files.file_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.session_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('analysis_id')
    )
    op.create_index('idx_analysis_file_id', 'analysis_history', ['file_id'], unique=False)
    op.create_index('idx_analysis_session_id', 'analysis_history', ['session_id'], unique=False)
    op.create_index('idx_analysis_started_at', 'analysis_history', ['started_at'], unique=False)
    op.create_index('idx_analysis_status', 'analysis_history', ['status'], unique=False)
    op.create_index('idx_analysis_user_id', 'analysis_history', ['user_id'], unique=False)
    op.create_table('file_sessions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('file_id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('added_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_used_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=True),
    sa.Column('is_primary', sa.Boolean(), nullable=True),
    sa.Column('analysis_context', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['file_id'], ['fits_files.file_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.session_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_file_session_file_id', 'file_sessions', ['file_id'], unique=False)
    op.create_index('idx_file_session_session_id', 'file_sessions', ['session_id'], unique=False)
    op.create_index('idx_file_session_unique', 'file_sessions', ['file_id', 'session_id'], unique=True)
    op.create_table('plot_files',
    sa.Column('plot_id', sa.UUID(), nullable=False),
    sa.Column('analysis_id', sa.UUID(), nullable=False),
    sa.Column('file_id', sa.UUID(), nullable=False),
    sa.Column('plot_type', sa.String(length=50), nullable=False),
    sa.Column('storage_path', sa.String(length=500), nullable=False),
    sa.Column('plot_url', sa.String(length=500), nullable=True),
    sa.Column('plot_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['analysis_id'], ['analysis_history.analysis_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['file_id'], ['fits_files.file_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('plot_id')
    )
    op.create_index('idx_plot_analysis_id', 'plot_files', ['analysis_id'], unique=False)
    op.create_index('idx_plot_file_id', 'plot_files', ['file_id'], unique=False)
    op.create_index('idx_plot_type', 'plot_files', ['plot_type'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_plot_type', table_name='plot_files')
    op.drop_index('idx_plot_file_id', table_name='plot_files')
    op.drop_index('idx_plot_analysis_id', table_name='plot_files')
    op.drop_table('plot_files')
    op.drop_index('idx_file_session_unique', table_name='file_sessions')
    op.drop_index('idx_file_session_session_id', table_name='file_sessions')
    op.drop_index('idx_file_session_file_id', table_name='file_sessions')
    op.drop_table('file_sessions')
    op.drop_index('idx_analysis_user_id', table_name='analysis_history')
    op.drop_index('idx_analysis_status', table_name='analysis_history')
    op.drop_index('idx_analysis_started_at', table_name='analysis_history')
    op.drop_index('idx_analysis_session_id', table_name='analysis_history')
    op.drop_index('idx_analysis_file_id', table_name='analysis_history')
    op.drop_table('analysis_history')
    op.drop_index('idx_session_user_id', table_name='sessions')
    op.drop_index('idx_session_last_activity', table_name='sessions')
    op.drop_index('idx_session_is_active', table_name='sessions')
    op.drop_table('sessions')
    op.drop_index('idx_fits_validation_status', table_name='fits_files')
    op.drop_index('idx_fits_user_id', table_name='fits_files')
    op.drop_index('idx_fits_uploaded_at', table_name='fits_files')
    op.drop_index('idx_fits_last_accessed', table_name='fits_files')
    op.drop_index('idx_fits_is_valid', table_name='fits_files')
    op.drop_table('fits_files')
    op.drop_index('idx_user_username', table_name='users')
    op.drop_index('idx_user_email', table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
